// -------------------------------------------------------------
// 
// File Name: C:\Users\jwbie\OneDrive\Documents\Academics\F22\551\551_Final_Project\fft_v2\hdl\joe_fft\TWDLMULT_SDNF1_3.v
// Created: 2022-12-08 20:30:07
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: TWDLMULT_SDNF1_3
// Source Path: joe_fft/FFT/TWDLMULT_SDNF1_3
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module TWDLMULT_SDNF1_3
          (clk,
           reset,
           enb_1_8_0,
           dout_1_re,
           dout_1_im,
           dout_3_re,
           dout_3_im,
           dout_2_vld,
           twdl_3_2_re,
           twdl_3_2_im,
           twdlXdin_1_re,
           twdlXdin_1_im,
           twdlXdin_2_re,
           twdlXdin_2_im,
           twdlXdin_1_vld);


  input   clk;
  input   reset;
  input   enb_1_8_0;
  input   signed [18:0] dout_1_re;  // sfix19
  input   signed [18:0] dout_1_im;  // sfix19
  input   signed [18:0] dout_3_re;  // sfix19
  input   signed [18:0] dout_3_im;  // sfix19
  input   dout_2_vld;
  input   signed [16:0] twdl_3_2_re;  // sfix17_En15
  input   signed [16:0] twdl_3_2_im;  // sfix17_En15
  output  signed [19:0] twdlXdin_1_re;  // sfix20
  output  signed [19:0] twdlXdin_1_im;  // sfix20
  output  signed [19:0] twdlXdin_2_re;  // sfix20
  output  signed [19:0] twdlXdin_2_im;  // sfix20
  output  twdlXdin_1_vld;


  wire signed [19:0] din_re;  // sfix20
  reg signed [19:0] din1_re_dly1;  // sfix20
  reg signed [19:0] din1_re_dly2;  // sfix20
  reg signed [19:0] din1_re_dly3;  // sfix20
  reg signed [19:0] din1_re_dly4;  // sfix20
  reg signed [19:0] din1_re_dly5;  // sfix20
  reg signed [19:0] din1_re_dly6;  // sfix20
  reg signed [19:0] din1_re_dly7;  // sfix20
  reg signed [19:0] din1_re_dly8;  // sfix20
  reg signed [19:0] din1_re_dly9;  // sfix20
  wire signed [19:0] din_im;  // sfix20
  reg signed [19:0] din1_im_dly1;  // sfix20
  reg signed [19:0] din1_im_dly2;  // sfix20
  reg signed [19:0] din1_im_dly3;  // sfix20
  reg signed [19:0] din1_im_dly4;  // sfix20
  reg signed [19:0] din1_im_dly5;  // sfix20
  reg signed [19:0] din1_im_dly6;  // sfix20
  reg signed [19:0] din1_im_dly7;  // sfix20
  reg signed [19:0] din1_im_dly8;  // sfix20
  reg signed [19:0] din1_im_dly9;  // sfix20
  wire signed [19:0] din_re_1;  // sfix20
  reg signed [19:0] din2_re_dly1;  // sfix20
  reg signed [19:0] din2_re_dly2;  // sfix20
  reg signed [19:0] din2_re_dly3;  // sfix20
  wire signed [19:0] din_im_1;  // sfix20
  reg signed [19:0] din2_im_dly1;  // sfix20
  reg signed [19:0] din2_im_dly2;  // sfix20
  reg signed [19:0] din2_im_dly3;  // sfix20
  reg  di2_vld_dly1;
  reg  di2_vld_dly2;
  reg  di2_vld_dly3;


  assign din_re = {dout_1_re[18], dout_1_re};



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        din1_re_dly1 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_re_dly1 <= din_re;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        din1_re_dly2 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_re_dly2 <= din1_re_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        din1_re_dly3 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_re_dly3 <= din1_re_dly2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        din1_re_dly4 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_re_dly4 <= din1_re_dly3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        din1_re_dly5 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_re_dly5 <= din1_re_dly4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        din1_re_dly6 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_re_dly6 <= din1_re_dly5;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        din1_re_dly7 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_re_dly7 <= din1_re_dly6;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        din1_re_dly8 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_re_dly8 <= din1_re_dly7;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_8_process
      if (reset == 1'b1) begin
        din1_re_dly9 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_re_dly9 <= din1_re_dly8;
        end
      end
    end



  assign twdlXdin_1_re = din1_re_dly9;

  assign din_im = {dout_1_im[18], dout_1_im};



  always @(posedge clk or posedge reset)
    begin : intdelay_9_process
      if (reset == 1'b1) begin
        din1_im_dly1 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_im_dly1 <= din_im;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_10_process
      if (reset == 1'b1) begin
        din1_im_dly2 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_im_dly2 <= din1_im_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_11_process
      if (reset == 1'b1) begin
        din1_im_dly3 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_im_dly3 <= din1_im_dly2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_12_process
      if (reset == 1'b1) begin
        din1_im_dly4 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_im_dly4 <= din1_im_dly3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_13_process
      if (reset == 1'b1) begin
        din1_im_dly5 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_im_dly5 <= din1_im_dly4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_14_process
      if (reset == 1'b1) begin
        din1_im_dly6 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_im_dly6 <= din1_im_dly5;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_15_process
      if (reset == 1'b1) begin
        din1_im_dly7 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_im_dly7 <= din1_im_dly6;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_16_process
      if (reset == 1'b1) begin
        din1_im_dly8 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_im_dly8 <= din1_im_dly7;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_17_process
      if (reset == 1'b1) begin
        din1_im_dly9 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_im_dly9 <= din1_im_dly8;
        end
      end
    end



  assign twdlXdin_1_im = din1_im_dly9;

  assign din_re_1 = {dout_3_re[18], dout_3_re};



  always @(posedge clk or posedge reset)
    begin : intdelay_18_process
      if (reset == 1'b1) begin
        din2_re_dly1 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din2_re_dly1 <= din_re_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_19_process
      if (reset == 1'b1) begin
        din2_re_dly2 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din2_re_dly2 <= din2_re_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_20_process
      if (reset == 1'b1) begin
        din2_re_dly3 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din2_re_dly3 <= din2_re_dly2;
        end
      end
    end



  assign din_im_1 = {dout_3_im[18], dout_3_im};



  always @(posedge clk or posedge reset)
    begin : intdelay_21_process
      if (reset == 1'b1) begin
        din2_im_dly1 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din2_im_dly1 <= din_im_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_22_process
      if (reset == 1'b1) begin
        din2_im_dly2 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din2_im_dly2 <= din2_im_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_23_process
      if (reset == 1'b1) begin
        din2_im_dly3 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din2_im_dly3 <= din2_im_dly2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_24_process
      if (reset == 1'b1) begin
        di2_vld_dly1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          di2_vld_dly1 <= dout_2_vld;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_25_process
      if (reset == 1'b1) begin
        di2_vld_dly2 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          di2_vld_dly2 <= di2_vld_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_26_process
      if (reset == 1'b1) begin
        di2_vld_dly3 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          di2_vld_dly3 <= di2_vld_dly2;
        end
      end
    end



  Complex4Multiply u_MUL4_2 (.clk(clk),
                             .reset(reset),
                             .enb_1_8_0(enb_1_8_0),
                             .din2_re_dly3(din2_re_dly3),  // sfix20
                             .din2_im_dly3(din2_im_dly3),  // sfix20
                             .di2_vld_dly3(di2_vld_dly3),
                             .twdl_3_2_re(twdl_3_2_re),  // sfix17_En15
                             .twdl_3_2_im(twdl_3_2_im),  // sfix17_En15
                             .twdlXdin_2_re(twdlXdin_2_re),  // sfix20
                             .twdlXdin_2_im(twdlXdin_2_im),  // sfix20
                             .twdlXdin2_vld(twdlXdin_1_vld)
                             );

endmodule  // TWDLMULT_SDNF1_3


// -------------------------------------------------------------
// 
// File Name: C:\Users\jwbie\OneDrive\Documents\Academics\F22\551\551_Final_Project\fft_v2\hdl\joe_fft\TWDLMULT_SDNF1_3_block2.v
// Created: 2022-12-08 20:30:07
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: TWDLMULT_SDNF1_3_block2
// Source Path: joe_fft/FFT/TWDLMULT_SDNF1_3
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module TWDLMULT_SDNF1_3_block2
          (clk,
           reset,
           enb_1_8_0,
           dout_6_re,
           dout_6_im,
           dout_8_re,
           dout_8_im,
           dout_2_vld,
           twdl_3_7_re,
           twdl_3_7_im,
           twdl_3_8_re,
           twdl_3_8_im,
           twdlXdin_7_re,
           twdlXdin_7_im,
           twdlXdin_8_re,
           twdlXdin_8_im);


  input   clk;
  input   reset;
  input   enb_1_8_0;
  input   signed [18:0] dout_6_re;  // sfix19
  input   signed [18:0] dout_6_im;  // sfix19
  input   signed [18:0] dout_8_re;  // sfix19
  input   signed [18:0] dout_8_im;  // sfix19
  input   dout_2_vld;
  input   signed [16:0] twdl_3_7_re;  // sfix17_En15
  input   signed [16:0] twdl_3_7_im;  // sfix17_En15
  input   signed [16:0] twdl_3_8_re;  // sfix17_En15
  input   signed [16:0] twdl_3_8_im;  // sfix17_En15
  output  signed [19:0] twdlXdin_7_re;  // sfix20
  output  signed [19:0] twdlXdin_7_im;  // sfix20
  output  signed [19:0] twdlXdin_8_re;  // sfix20
  output  signed [19:0] twdlXdin_8_im;  // sfix20


  wire signed [19:0] din_re;  // sfix20
  reg signed [19:0] din1_re_dly1;  // sfix20
  reg signed [19:0] din1_re_dly2;  // sfix20
  reg signed [19:0] din1_re_dly3;  // sfix20
  wire signed [19:0] din_im;  // sfix20
  reg signed [19:0] din1_im_dly1;  // sfix20
  reg signed [19:0] din1_im_dly2;  // sfix20
  reg signed [19:0] din1_im_dly3;  // sfix20
  reg  din1_vld_dly1;
  reg  din1_vld_dly2;
  reg  din1_vld_dly3;
  wire signed [19:0] din_re_1;  // sfix20
  reg signed [19:0] din2_re_dly1;  // sfix20
  reg signed [19:0] din2_re_dly2;  // sfix20
  reg signed [19:0] din2_re_dly3;  // sfix20
  wire signed [19:0] din_im_1;  // sfix20
  reg signed [19:0] din2_im_dly1;  // sfix20
  reg signed [19:0] din2_im_dly2;  // sfix20
  reg signed [19:0] din2_im_dly3;  // sfix20
  reg  di2_vld_dly1;
  reg  di2_vld_dly2;
  reg  di2_vld_dly3;


  assign din_re = {dout_6_re[18], dout_6_re};



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        din1_re_dly1 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_re_dly1 <= din_re;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        din1_re_dly2 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_re_dly2 <= din1_re_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        din1_re_dly3 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_re_dly3 <= din1_re_dly2;
        end
      end
    end



  assign din_im = {dout_6_im[18], dout_6_im};



  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        din1_im_dly1 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_im_dly1 <= din_im;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        din1_im_dly2 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_im_dly2 <= din1_im_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        din1_im_dly3 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din1_im_dly3 <= din1_im_dly2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        din1_vld_dly1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          din1_vld_dly1 <= dout_2_vld;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        din1_vld_dly2 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          din1_vld_dly2 <= din1_vld_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_8_process
      if (reset == 1'b1) begin
        din1_vld_dly3 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          din1_vld_dly3 <= din1_vld_dly2;
        end
      end
    end



  Complex4Multiply_block3 u_MUL4_1 (.clk(clk),
                                    .reset(reset),
                                    .enb_1_8_0(enb_1_8_0),
                                    .din1_re_dly3(din1_re_dly3),  // sfix20
                                    .din1_im_dly3(din1_im_dly3),  // sfix20
                                    .din1_vld_dly3(din1_vld_dly3),
                                    .twdl_3_7_re(twdl_3_7_re),  // sfix17_En15
                                    .twdl_3_7_im(twdl_3_7_im),  // sfix17_En15
                                    .twdlXdin_7_re(twdlXdin_7_re),  // sfix20
                                    .twdlXdin_7_im(twdlXdin_7_im)  // sfix20
                                    );

  assign din_re_1 = {dout_8_re[18], dout_8_re};



  always @(posedge clk or posedge reset)
    begin : intdelay_9_process
      if (reset == 1'b1) begin
        din2_re_dly1 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din2_re_dly1 <= din_re_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_10_process
      if (reset == 1'b1) begin
        din2_re_dly2 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din2_re_dly2 <= din2_re_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_11_process
      if (reset == 1'b1) begin
        din2_re_dly3 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din2_re_dly3 <= din2_re_dly2;
        end
      end
    end



  assign din_im_1 = {dout_8_im[18], dout_8_im};



  always @(posedge clk or posedge reset)
    begin : intdelay_12_process
      if (reset == 1'b1) begin
        din2_im_dly1 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din2_im_dly1 <= din_im_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_13_process
      if (reset == 1'b1) begin
        din2_im_dly2 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din2_im_dly2 <= din2_im_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_14_process
      if (reset == 1'b1) begin
        din2_im_dly3 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          din2_im_dly3 <= din2_im_dly2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_15_process
      if (reset == 1'b1) begin
        di2_vld_dly1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          di2_vld_dly1 <= dout_2_vld;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_16_process
      if (reset == 1'b1) begin
        di2_vld_dly2 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          di2_vld_dly2 <= di2_vld_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_17_process
      if (reset == 1'b1) begin
        di2_vld_dly3 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          di2_vld_dly3 <= di2_vld_dly2;
        end
      end
    end



  Complex4Multiply_block4 u_MUL4_2 (.clk(clk),
                                    .reset(reset),
                                    .enb_1_8_0(enb_1_8_0),
                                    .din2_re_dly3(din2_re_dly3),  // sfix20
                                    .din2_im_dly3(din2_im_dly3),  // sfix20
                                    .di2_vld_dly3(di2_vld_dly3),
                                    .twdl_3_8_re(twdl_3_8_re),  // sfix17_En15
                                    .twdl_3_8_im(twdl_3_8_im),  // sfix17_En15
                                    .twdlXdin_8_re(twdlXdin_8_re),  // sfix20
                                    .twdlXdin_8_im(twdlXdin_8_im)  // sfix20
                                    );

endmodule  // TWDLMULT_SDNF1_3_block2


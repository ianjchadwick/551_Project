// -------------------------------------------------------------
// 
// File Name: C:\Users\jwbie\OneDrive\Documents\Academics\F22\551\551_Final_Project\fft_v2\hdl\joe_fft\fifo_1.v
// Created: 2022-12-08 20:30:07
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: fifo_1
// Source Path: joe_fft/fifo_1
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module fifo_1
          (clk,
           reset,
           enb,
           push,
           sample_in,
           full,
           valid_frame,
           frame_out_0,
           frame_out_1,
           frame_out_2,
           frame_out_3,
           frame_out_4,
           frame_out_5,
           frame_out_6,
           frame_out_7);


  input   clk;
  input   reset;
  input   enb;
  input   push;
  input   [15:0] sample_in;  // uint16
  output  full;
  output  valid_frame;
  output  [15:0] frame_out_0;  // uint16
  output  [15:0] frame_out_1;  // uint16
  output  [15:0] frame_out_2;  // uint16
  output  [15:0] frame_out_3;  // uint16
  output  [15:0] frame_out_4;  // uint16
  output  [15:0] frame_out_5;  // uint16
  output  [15:0] frame_out_6;  // uint16
  output  [15:0] frame_out_7;  // uint16


  wire HDL_FIFO_out2;
  wire Logical_Operator_out1;
  wire [15:0] HDL_FIFO_out1;  // uint16
  wire HDL_FIFO_out3;
  reg [3:0] Deserializer1D_contl_cnt;  // ufix4
  wire Deserializer1D_contl_validOutput;
  wire Deserializer1D_innerRegEn;
  wire Deserializer1D_innerRegCtrolEn;
  wire Deserializer1D_outBypassEn;
  wire Deserializer1D_tapDelayEn;
  wire Deserializer1D_hOutSignalsContl;
  reg  Deserializer1D_out2;
  wire Deserializer1D_tapDelayEn_1;
  reg [15:0] Deserializer1D_tapDelayComp_reg [0:6];  // ufix16 [7]
  wire [15:0] Deserializer1D_tapDelayComp_reg_next [0:6];  // ufix16 [7]
  wire [15:0] Deserializer1D_tapout [0:6];  // uint16 [7]
  wire [15:0] Deserializer1D_muxOut [0:7];  // uint16 [8]
  reg [15:0] Deserializer1D_out1 [0:7];  // uint16 [8]


  assign Logical_Operator_out1 =  ~ HDL_FIFO_out2;



  HDL_FIFO u_HDL_FIFO (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .In(sample_in),  // uint16
                       .Push(push),
                       .Pop(Logical_Operator_out1),
                       .Out(HDL_FIFO_out1),  // uint16
                       .Empty(HDL_FIFO_out2),
                       .Full(HDL_FIFO_out3)
                       );

  assign full = HDL_FIFO_out3;

  always @(posedge clk or posedge reset)
    begin : Deserializer1D_contl_process
      if (reset == 1'b1) begin
        Deserializer1D_contl_cnt <= 4'b0000;
      end
      else begin
        if (enb) begin
          if (Deserializer1D_contl_cnt == 4'b0111) begin
            Deserializer1D_contl_cnt <= 4'b0000;
          end
          else begin
            Deserializer1D_contl_cnt <= Deserializer1D_contl_cnt + 4'b0001;
          end
        end
      end
    end

  assign Deserializer1D_tapDelayEn = Deserializer1D_contl_cnt < 4'b0111;
  assign Deserializer1D_contl_validOutput = (Deserializer1D_contl_cnt == 4'b0111 ? 1'b1 :
              1'b0);
  assign Deserializer1D_hOutSignalsContl = (Deserializer1D_contl_validOutput ? 1'b1 :
              1'b0);
  assign Deserializer1D_innerRegEn = (Deserializer1D_contl_validOutput ? 1'b1 :
              1'b0);
  assign Deserializer1D_innerRegCtrolEn = (Deserializer1D_contl_validOutput ? 1'b1 :
              1'b0);
  assign Deserializer1D_outBypassEn = 1'b1;



  always @(posedge clk or posedge reset)
    begin : Deserializer1D_regComp_process
      if (reset == 1'b1) begin
        Deserializer1D_out2 <= 1'b0;
      end
      else begin
        if (enb && Deserializer1D_innerRegCtrolEn) begin
          Deserializer1D_out2 <= Deserializer1D_hOutSignalsContl;
        end
      end
    end



  assign valid_frame = Deserializer1D_out2;

  assign Deserializer1D_tapDelayEn_1 = enb & Deserializer1D_tapDelayEn;



  always @(posedge clk or posedge reset)
    begin : Deserializer1D_tapDelayComp_process
      if (reset == 1'b1) begin
        Deserializer1D_tapDelayComp_reg[0] <= 16'b0000000000000000;
        Deserializer1D_tapDelayComp_reg[1] <= 16'b0000000000000000;
        Deserializer1D_tapDelayComp_reg[2] <= 16'b0000000000000000;
        Deserializer1D_tapDelayComp_reg[3] <= 16'b0000000000000000;
        Deserializer1D_tapDelayComp_reg[4] <= 16'b0000000000000000;
        Deserializer1D_tapDelayComp_reg[5] <= 16'b0000000000000000;
        Deserializer1D_tapDelayComp_reg[6] <= 16'b0000000000000000;
      end
      else begin
        if (enb && Deserializer1D_tapDelayEn_1) begin
          Deserializer1D_tapDelayComp_reg[0] <= Deserializer1D_tapDelayComp_reg_next[0];
          Deserializer1D_tapDelayComp_reg[1] <= Deserializer1D_tapDelayComp_reg_next[1];
          Deserializer1D_tapDelayComp_reg[2] <= Deserializer1D_tapDelayComp_reg_next[2];
          Deserializer1D_tapDelayComp_reg[3] <= Deserializer1D_tapDelayComp_reg_next[3];
          Deserializer1D_tapDelayComp_reg[4] <= Deserializer1D_tapDelayComp_reg_next[4];
          Deserializer1D_tapDelayComp_reg[5] <= Deserializer1D_tapDelayComp_reg_next[5];
          Deserializer1D_tapDelayComp_reg[6] <= Deserializer1D_tapDelayComp_reg_next[6];
        end
      end
    end

  assign Deserializer1D_tapout[0] = Deserializer1D_tapDelayComp_reg[0];
  assign Deserializer1D_tapout[1] = Deserializer1D_tapDelayComp_reg[1];
  assign Deserializer1D_tapout[2] = Deserializer1D_tapDelayComp_reg[2];
  assign Deserializer1D_tapout[3] = Deserializer1D_tapDelayComp_reg[3];
  assign Deserializer1D_tapout[4] = Deserializer1D_tapDelayComp_reg[4];
  assign Deserializer1D_tapout[5] = Deserializer1D_tapDelayComp_reg[5];
  assign Deserializer1D_tapout[6] = Deserializer1D_tapDelayComp_reg[6];
  assign Deserializer1D_tapDelayComp_reg_next[0] = Deserializer1D_tapDelayComp_reg[1];
  assign Deserializer1D_tapDelayComp_reg_next[1] = Deserializer1D_tapDelayComp_reg[2];
  assign Deserializer1D_tapDelayComp_reg_next[2] = Deserializer1D_tapDelayComp_reg[3];
  assign Deserializer1D_tapDelayComp_reg_next[3] = Deserializer1D_tapDelayComp_reg[4];
  assign Deserializer1D_tapDelayComp_reg_next[4] = Deserializer1D_tapDelayComp_reg[5];
  assign Deserializer1D_tapDelayComp_reg_next[5] = Deserializer1D_tapDelayComp_reg[6];
  assign Deserializer1D_tapDelayComp_reg_next[6] = HDL_FIFO_out1;



  assign Deserializer1D_muxOut[0] = Deserializer1D_tapout[0];
  assign Deserializer1D_muxOut[1] = Deserializer1D_tapout[1];
  assign Deserializer1D_muxOut[2] = Deserializer1D_tapout[2];
  assign Deserializer1D_muxOut[3] = Deserializer1D_tapout[3];
  assign Deserializer1D_muxOut[4] = Deserializer1D_tapout[4];
  assign Deserializer1D_muxOut[5] = Deserializer1D_tapout[5];
  assign Deserializer1D_muxOut[6] = Deserializer1D_tapout[6];
  assign Deserializer1D_muxOut[7] = HDL_FIFO_out1;

  always @(posedge clk or posedge reset)
    begin : Deserializer1D_regComp_1_process
      if (reset == 1'b1) begin
        Deserializer1D_out1[0] <= 16'b0000000000000000;
        Deserializer1D_out1[1] <= 16'b0000000000000000;
        Deserializer1D_out1[2] <= 16'b0000000000000000;
        Deserializer1D_out1[3] <= 16'b0000000000000000;
        Deserializer1D_out1[4] <= 16'b0000000000000000;
        Deserializer1D_out1[5] <= 16'b0000000000000000;
        Deserializer1D_out1[6] <= 16'b0000000000000000;
        Deserializer1D_out1[7] <= 16'b0000000000000000;
      end
      else begin
        if (enb && Deserializer1D_innerRegEn) begin
          Deserializer1D_out1[0] <= Deserializer1D_muxOut[0];
          Deserializer1D_out1[1] <= Deserializer1D_muxOut[1];
          Deserializer1D_out1[2] <= Deserializer1D_muxOut[2];
          Deserializer1D_out1[3] <= Deserializer1D_muxOut[3];
          Deserializer1D_out1[4] <= Deserializer1D_muxOut[4];
          Deserializer1D_out1[5] <= Deserializer1D_muxOut[5];
          Deserializer1D_out1[6] <= Deserializer1D_muxOut[6];
          Deserializer1D_out1[7] <= Deserializer1D_muxOut[7];
        end
      end
    end



  assign frame_out_0 = Deserializer1D_out1[0];

  assign frame_out_1 = Deserializer1D_out1[1];

  assign frame_out_2 = Deserializer1D_out1[2];

  assign frame_out_3 = Deserializer1D_out1[3];

  assign frame_out_4 = Deserializer1D_out1[4];

  assign frame_out_5 = Deserializer1D_out1[5];

  assign frame_out_6 = Deserializer1D_out1[6];

  assign frame_out_7 = Deserializer1D_out1[7];

endmodule  // fifo_1


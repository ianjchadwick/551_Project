// -------------------------------------------------------------
// 
// File Name: C:\Users\jwbie\OneDrive\Documents\Academics\F22\551\551_Final_Project\fft_v2\hdl\joe_fft\FFT.v
// Created: 2022-12-08 20:30:07
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: FFT
// Source Path: joe_fft/FFT
// Hierarchy Level: 1
// 
// FFT
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module FFT
          (clk,
           reset,
           enb_1_8_0,
           dataIn_0,
           dataIn_1,
           dataIn_2,
           dataIn_3,
           dataIn_4,
           dataIn_5,
           dataIn_6,
           dataIn_7,
           validIn,
           dataOut_re_0,
           dataOut_re_1,
           dataOut_re_2,
           dataOut_re_3,
           dataOut_re_4,
           dataOut_re_5,
           dataOut_re_6,
           dataOut_re_7,
           validOut);


  input   clk;
  input   reset;
  input   enb_1_8_0;
  input   [15:0] dataIn_0;  // uint16
  input   [15:0] dataIn_1;  // uint16
  input   [15:0] dataIn_2;  // uint16
  input   [15:0] dataIn_3;  // uint16
  input   [15:0] dataIn_4;  // uint16
  input   [15:0] dataIn_5;  // uint16
  input   [15:0] dataIn_6;  // uint16
  input   [15:0] dataIn_7;  // uint16
  input   validIn;
  output  signed [20:0] dataOut_re_0;  // sfix21
  output  signed [20:0] dataOut_re_1;  // sfix21
  output  signed [20:0] dataOut_re_2;  // sfix21
  output  signed [20:0] dataOut_re_3;  // sfix21
  output  signed [20:0] dataOut_re_4;  // sfix21
  output  signed [20:0] dataOut_re_5;  // sfix21
  output  signed [20:0] dataOut_re_6;  // sfix21
  output  signed [20:0] dataOut_re_7;  // sfix21
  output  validOut;


  wire rotate_1;  // ufix1
  wire softReset;
  wire signed [16:0] dtc_im;  // sfix17
  reg signed [16:0] intdelay_reg [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_1_re_dly;  // sfix17
  wire signed [16:0] dtc_re;  // sfix17
  reg signed [16:0] intdelay_reg_1 [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next_1 [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_1_im_dly;  // sfix17
  reg  [0:2] intdelay_reg_2;  // ufix1 [3]
  wire [0:2] intdelay_reg_next_2;  // ufix1 [3]
  wire din_1_vld_dly;
  wire dinXTwdl_1_1_vld;
  wire rd_1_Addr;
  wire rd_1_Enb;
  wire proc_1_enb;
  wire signed [17:0] dout_1_1_re;  // sfix18
  wire signed [17:0] dout_1_1_im;  // sfix18
  wire dout_1_1_vld;
  reg  CTRL_SDNF2_ctrl_state;  // ufix1
  reg  CTRL_SDNF2_multiply_J_reg;
  reg  CTRL_SDNF2_ctrl_state_next;  // ufix1
  reg  CTRL_SDNF2_multiply_J_reg_next;
  reg  rotate_8;  // ufix1
  wire signed [16:0] dtc_im_1;  // sfix17
  reg signed [16:0] intdelay_reg_3 [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next_3 [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_5_re_dly;  // sfix17
  wire signed [16:0] dtc_re_1;  // sfix17
  reg signed [16:0] intdelay_reg_4 [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next_4 [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_5_im_dly;  // sfix17
  wire signed [17:0] dout_1_5_re;  // sfix18
  wire signed [17:0] dout_1_5_im;  // sfix18
  wire signed [18:0] dout_1_re;  // sfix19
  wire signed [18:0] dout_1_im;  // sfix19
  wire signed [18:0] dout_2_re;  // sfix19
  wire signed [18:0] dout_2_im;  // sfix19
  wire dout_2_vld;
  wire signed [16:0] dtc_im_2;  // sfix17
  reg signed [16:0] intdelay_reg_5 [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next_5 [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_2_re_dly;  // sfix17
  wire signed [16:0] dtc_re_2;  // sfix17
  reg signed [16:0] intdelay_reg_6 [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next_6 [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_2_im_dly;  // sfix17
  wire signed [17:0] dout_1_2_re;  // sfix18
  wire signed [17:0] dout_1_2_im;  // sfix18
  wire signed [16:0] dtc_im_3;  // sfix17
  reg signed [16:0] intdelay_reg_7 [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next_7 [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_6_re_dly;  // sfix17
  wire signed [16:0] dtc_re_3;  // sfix17
  reg signed [16:0] intdelay_reg_8 [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next_8 [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_6_im_dly;  // sfix17
  wire signed [17:0] dout_1_6_re;  // sfix18
  wire signed [17:0] dout_1_6_im;  // sfix18
  wire signed [18:0] dout_3_re;  // sfix19
  wire signed [18:0] dout_3_im;  // sfix19
  wire signed [18:0] dout_4_re;  // sfix19
  wire signed [18:0] dout_4_im;  // sfix19
  wire signed [16:0] twdl_3_2_re;  // sfix17_En15
  wire signed [16:0] twdl_3_2_im;  // sfix17_En15
  wire signed [19:0] twdlXdin_1_re;  // sfix20
  wire signed [19:0] twdlXdin_1_im;  // sfix20
  wire signed [19:0] twdlXdin_2_re;  // sfix20
  wire signed [19:0] twdlXdin_2_im;  // sfix20
  wire twdlXdin_1_vld;
  wire signed [16:0] dtc_im_4;  // sfix17
  reg signed [16:0] intdelay_reg_9 [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next_9 [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_3_re_dly;  // sfix17
  wire signed [16:0] dtc_re_4;  // sfix17
  reg signed [16:0] intdelay_reg_10 [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next_10 [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_3_im_dly;  // sfix17
  wire signed [17:0] dout_1_3_re;  // sfix18
  wire signed [17:0] dout_1_3_im;  // sfix18
  wire signed [16:0] dtc_im_5;  // sfix17
  reg signed [16:0] intdelay_reg_11 [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next_11 [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_7_re_dly;  // sfix17
  wire signed [16:0] dtc_re_5;  // sfix17
  reg signed [16:0] intdelay_reg_12 [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next_12 [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_7_im_dly;  // sfix17
  wire signed [17:0] dout_1_7_re;  // sfix18
  wire signed [17:0] dout_1_7_im;  // sfix18
  wire signed [18:0] dout_5_re;  // sfix19
  wire signed [18:0] dout_5_im;  // sfix19
  wire signed [18:0] dout_6_re;  // sfix19
  wire signed [18:0] dout_6_im;  // sfix19
  wire signed [16:0] dtc_im_6;  // sfix17
  reg signed [16:0] intdelay_reg_13 [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next_13 [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_4_re_dly;  // sfix17
  wire signed [16:0] dtc_re_6;  // sfix17
  reg signed [16:0] intdelay_reg_14 [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next_14 [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_4_im_dly;  // sfix17
  wire signed [17:0] dout_1_4_re;  // sfix18
  wire signed [17:0] dout_1_4_im;  // sfix18
  wire signed [16:0] dtc_im_7;  // sfix17
  reg signed [16:0] intdelay_reg_15 [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next_15 [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_8_re_dly;  // sfix17
  wire signed [16:0] dtc_re_7;  // sfix17
  reg signed [16:0] intdelay_reg_16 [0:2];  // sfix17 [3]
  wire signed [16:0] intdelay_reg_next_16 [0:2];  // sfix17 [3]
  wire signed [16:0] din_1_8_im_dly;  // sfix17
  wire signed [17:0] dout_1_8_re;  // sfix18
  wire signed [17:0] dout_1_8_im;  // sfix18
  wire signed [18:0] dout_7_re;  // sfix19
  wire signed [18:0] dout_7_im;  // sfix19
  wire signed [18:0] dout_8_re;  // sfix19
  wire signed [18:0] dout_8_im;  // sfix19
  wire signed [16:0] twdl_3_3_re;  // sfix17_En15
  wire signed [16:0] twdl_3_3_im;  // sfix17_En15
  wire signed [16:0] twdl_3_4_re;  // sfix17_En15
  wire signed [16:0] twdl_3_4_im;  // sfix17_En15
  wire signed [19:0] twdlXdin_3_re;  // sfix20
  wire signed [19:0] twdlXdin_3_im;  // sfix20
  wire signed [19:0] twdlXdin_4_re;  // sfix20
  wire signed [19:0] twdlXdin_4_im;  // sfix20
  wire signed [19:0] dout_1_re_1;  // sfix20
  wire signed [19:0] dout_1_im_1;  // sfix20
  wire signed [19:0] dout_2_re_1;  // sfix20
  wire signed [19:0] dout_2_im_1;  // sfix20
  wire dout_1_vld;
  wire signed [19:0] dout_3_re_1;  // sfix20
  wire signed [19:0] dout_3_im_1;  // sfix20
  wire signed [19:0] dout_4_re_1;  // sfix20
  wire signed [19:0] dout_4_im_1;  // sfix20
  wire signed [20:0] dout_1_re_2;  // sfix21
  wire signed [20:0] dout_1_im_2;  // sfix21
  wire signed [20:0] dout_2_re_2;  // sfix21
  wire signed [20:0] dout_2_im_2;  // sfix21
  wire dout_4_vld;
  wire rotate_3;  // ufix1
  wire signed [20:0] dout_3_re_2;  // sfix21
  wire signed [20:0] dout_3_im_2;  // sfix21
  wire signed [20:0] dout_4_re_2;  // sfix21
  wire signed [20:0] dout_4_im_2;  // sfix21
  wire rotate_5;  // ufix1
  wire signed [16:0] twdl_3_6_re;  // sfix17_En15
  wire signed [16:0] twdl_3_6_im;  // sfix17_En15
  wire signed [19:0] twdlXdin_5_re;  // sfix20
  wire signed [19:0] twdlXdin_5_im;  // sfix20
  wire signed [19:0] twdlXdin_6_re;  // sfix20
  wire signed [19:0] twdlXdin_6_im;  // sfix20
  wire signed [16:0] twdl_3_7_re;  // sfix17_En15
  wire signed [16:0] twdl_3_7_im;  // sfix17_En15
  wire signed [16:0] twdl_3_8_re;  // sfix17_En15
  wire signed [16:0] twdl_3_8_im;  // sfix17_En15
  wire signed [19:0] twdlXdin_7_re;  // sfix20
  wire signed [19:0] twdlXdin_7_im;  // sfix20
  wire signed [19:0] twdlXdin_8_re;  // sfix20
  wire signed [19:0] twdlXdin_8_im;  // sfix20
  wire signed [19:0] dout_5_re_1;  // sfix20
  wire signed [19:0] dout_5_im_1;  // sfix20
  wire signed [19:0] dout_6_re_1;  // sfix20
  wire signed [19:0] dout_6_im_1;  // sfix20
  wire signed [19:0] dout_7_re_1;  // sfix20
  wire signed [19:0] dout_7_im_1;  // sfix20
  wire signed [19:0] dout_8_re_1;  // sfix20
  wire signed [19:0] dout_8_im_1;  // sfix20
  wire signed [20:0] dout_5_re_2;  // sfix21
  wire signed [20:0] dout_5_im_2;  // sfix21
  wire signed [20:0] dout_6_re_2;  // sfix21
  wire signed [20:0] dout_6_im_2;  // sfix21
  wire rotate_7;  // ufix1
  wire signed [20:0] dout_7_re_2;  // sfix21
  wire signed [20:0] dout_7_im_2;  // sfix21
  wire signed [20:0] dout_8_re_2;  // sfix21
  wire signed [20:0] dout_8_im_2;  // sfix21
  wire signed [20:0] dMem_im1;  // sfix21
  wire dMem_vld1;
  wire signed [20:0] dMem_im2;  // sfix21
  wire signed [20:0] dMem_im3;  // sfix21
  wire signed [20:0] dMem_im4;  // sfix21
  wire signed [20:0] dMem_im5;  // sfix21
  wire signed [20:0] dMem_im6;  // sfix21
  wire signed [20:0] dMem_im7;  // sfix21
  wire signed [20:0] dMem_im8;  // sfix21
  wire signed [20:0] dMux_im1;  // sfix21
  wire dMux_vld1;
  wire signed [20:0] dMux_im2;  // sfix21
  wire signed [20:0] dMux_im3;  // sfix21
  wire signed [20:0] dMux_im4;  // sfix21
  wire signed [20:0] dMux_im5;  // sfix21
  wire signed [20:0] dMux_im6;  // sfix21
  wire signed [20:0] dMux_im7;  // sfix21
  wire signed [20:0] dMux_im8;  // sfix21


  assign rotate_1 = 1'b0;



  assign softReset = 1'b0;



  assign dtc_im = 17'sb00000000000000000;



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg[0] <= 17'sb00000000000000000;
        intdelay_reg[1] <= 17'sb00000000000000000;
        intdelay_reg[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg[0] <= 17'sb00000000000000000;
            intdelay_reg[1] <= 17'sb00000000000000000;
            intdelay_reg[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg[0] <= intdelay_reg_next[0];
            intdelay_reg[1] <= intdelay_reg_next[1];
            intdelay_reg[2] <= intdelay_reg_next[2];
          end
        end
      end
    end

  assign din_1_1_re_dly = intdelay_reg[2];
  assign intdelay_reg_next[0] = dtc_im;
  assign intdelay_reg_next[1] = intdelay_reg[0];
  assign intdelay_reg_next[2] = intdelay_reg[1];



  assign dtc_re = {1'b0, dataIn_0};



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        intdelay_reg_1[0] <= 17'sb00000000000000000;
        intdelay_reg_1[1] <= 17'sb00000000000000000;
        intdelay_reg_1[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_1[0] <= 17'sb00000000000000000;
            intdelay_reg_1[1] <= 17'sb00000000000000000;
            intdelay_reg_1[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg_1[0] <= intdelay_reg_next_1[0];
            intdelay_reg_1[1] <= intdelay_reg_next_1[1];
            intdelay_reg_1[2] <= intdelay_reg_next_1[2];
          end
        end
      end
    end

  assign din_1_1_im_dly = intdelay_reg_1[2];
  assign intdelay_reg_next_1[0] = dtc_re;
  assign intdelay_reg_next_1[1] = intdelay_reg_1[0];
  assign intdelay_reg_next_1[2] = intdelay_reg_1[1];



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        intdelay_reg_2[0] <= 1'b0;
        intdelay_reg_2[1] <= 1'b0;
        intdelay_reg_2[2] <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_2[0] <= 1'b0;
            intdelay_reg_2[1] <= 1'b0;
            intdelay_reg_2[2] <= 1'b0;
          end
          else begin
            intdelay_reg_2[0] <= intdelay_reg_next_2[0];
            intdelay_reg_2[1] <= intdelay_reg_next_2[1];
            intdelay_reg_2[2] <= intdelay_reg_next_2[2];
          end
        end
      end
    end

  assign din_1_vld_dly = intdelay_reg_2[2];
  assign intdelay_reg_next_2[0] = validIn;
  assign intdelay_reg_next_2[1] = intdelay_reg_2[0];
  assign intdelay_reg_next_2[2] = intdelay_reg_2[1];



  RADIX22FFT_CTRL1_1 u_CTRL1_1_8 (.clk(clk),
                                  .reset(reset),
                                  .enb_1_8_0(enb_1_8_0),
                                  .dinXTwdl_1_1_vld(dinXTwdl_1_1_vld),
                                  .dinXTwdl_1_1_vld_1(dinXTwdl_1_1_vld),
                                  .rd_1_Addr(rd_1_Addr),
                                  .rd_1_Enb(rd_1_Enb),
                                  .proc_1_enb(proc_1_enb)
                                  );

  RADIX22FFT_SDF1_1 u_SDF1_1_1 (.clk(clk),
                                .reset(reset),
                                .enb_1_8_0(enb_1_8_0),
                                .din_1_1_re_dly(din_1_1_re_dly),  // sfix17
                                .din_1_1_im_dly(din_1_1_im_dly),  // sfix17
                                .din_1_vld_dly(din_1_vld_dly),
                                .rd_1_Addr(rd_1_Addr),
                                .rd_1_Enb(rd_1_Enb),
                                .proc_1_enb(proc_1_enb),
                                .dout_1_1_re(dout_1_1_re),  // sfix18
                                .dout_1_1_im(dout_1_1_im),  // sfix18
                                .dout_1_1_vld(dout_1_1_vld),
                                .dinXTwdl_1_1_vld(dinXTwdl_1_1_vld)
                                );

  // CTRL_SDNF2
  always @(posedge clk or posedge reset)
    begin : CTRL_SDNF2_process
      if (reset == 1'b1) begin
        CTRL_SDNF2_ctrl_state <= 1'b0;
        CTRL_SDNF2_multiply_J_reg <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            CTRL_SDNF2_ctrl_state <= 1'b0;
            CTRL_SDNF2_multiply_J_reg <= 1'b0;
          end
          else begin
            CTRL_SDNF2_ctrl_state <= CTRL_SDNF2_ctrl_state_next;
            CTRL_SDNF2_multiply_J_reg <= CTRL_SDNF2_multiply_J_reg_next;
          end
        end
      end
    end

  always @(CTRL_SDNF2_ctrl_state, CTRL_SDNF2_multiply_J_reg, dout_1_1_vld) begin
    CTRL_SDNF2_ctrl_state_next = CTRL_SDNF2_ctrl_state;
    CTRL_SDNF2_multiply_J_reg_next = CTRL_SDNF2_multiply_J_reg;
    rotate_8 = CTRL_SDNF2_multiply_J_reg;
    case ( CTRL_SDNF2_ctrl_state)
      1'b0 :
        begin
          CTRL_SDNF2_ctrl_state_next = 1'b0;
          CTRL_SDNF2_multiply_J_reg_next = 1'b0;
          if (dout_1_1_vld) begin
            CTRL_SDNF2_ctrl_state_next = 1'b1;
            CTRL_SDNF2_multiply_J_reg_next = 1'b1;
          end
        end
      1'b1 :
        begin
          CTRL_SDNF2_ctrl_state_next = 1'b1;
          CTRL_SDNF2_multiply_J_reg_next = 1'b1;
          if (dout_1_1_vld) begin
            CTRL_SDNF2_ctrl_state_next = 1'b0;
            CTRL_SDNF2_multiply_J_reg_next = 1'b0;
          end
        end
      default :
        begin
          CTRL_SDNF2_multiply_J_reg_next = 1'b0;
          CTRL_SDNF2_ctrl_state_next = 1'b0;
        end
    endcase
  end



  assign dtc_im_1 = 17'sb00000000000000000;



  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        intdelay_reg_3[0] <= 17'sb00000000000000000;
        intdelay_reg_3[1] <= 17'sb00000000000000000;
        intdelay_reg_3[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_3[0] <= 17'sb00000000000000000;
            intdelay_reg_3[1] <= 17'sb00000000000000000;
            intdelay_reg_3[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg_3[0] <= intdelay_reg_next_3[0];
            intdelay_reg_3[1] <= intdelay_reg_next_3[1];
            intdelay_reg_3[2] <= intdelay_reg_next_3[2];
          end
        end
      end
    end

  assign din_1_5_re_dly = intdelay_reg_3[2];
  assign intdelay_reg_next_3[0] = dtc_im_1;
  assign intdelay_reg_next_3[1] = intdelay_reg_3[0];
  assign intdelay_reg_next_3[2] = intdelay_reg_3[1];



  assign dtc_re_1 = {1'b0, dataIn_4};



  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        intdelay_reg_4[0] <= 17'sb00000000000000000;
        intdelay_reg_4[1] <= 17'sb00000000000000000;
        intdelay_reg_4[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_4[0] <= 17'sb00000000000000000;
            intdelay_reg_4[1] <= 17'sb00000000000000000;
            intdelay_reg_4[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg_4[0] <= intdelay_reg_next_4[0];
            intdelay_reg_4[1] <= intdelay_reg_next_4[1];
            intdelay_reg_4[2] <= intdelay_reg_next_4[2];
          end
        end
      end
    end

  assign din_1_5_im_dly = intdelay_reg_4[2];
  assign intdelay_reg_next_4[0] = dtc_re_1;
  assign intdelay_reg_next_4[1] = intdelay_reg_4[0];
  assign intdelay_reg_next_4[2] = intdelay_reg_4[1];



  RADIX22FFT_SDF1_1_block3 u_SDF1_1_5 (.clk(clk),
                                       .reset(reset),
                                       .enb_1_8_0(enb_1_8_0),
                                       .din_1_5_re_dly(din_1_5_re_dly),  // sfix17
                                       .din_1_5_im_dly(din_1_5_im_dly),  // sfix17
                                       .din_1_vld_dly(din_1_vld_dly),
                                       .rd_1_Addr(rd_1_Addr),
                                       .rd_1_Enb(rd_1_Enb),
                                       .proc_1_enb(proc_1_enb),
                                       .dout_1_5_re(dout_1_5_re),  // sfix18
                                       .dout_1_5_im(dout_1_5_im)  // sfix18
                                       );

  RADIX22FFT_SDNF2_2 u_SDNF2_2_1 (.clk(clk),
                                  .reset(reset),
                                  .enb_1_8_0(enb_1_8_0),
                                  .rotate_8(rotate_8),  // ufix1
                                  .dout_1_1_re(dout_1_1_re),  // sfix18
                                  .dout_1_1_im(dout_1_1_im),  // sfix18
                                  .dout_1_5_re(dout_1_5_re),  // sfix18
                                  .dout_1_5_im(dout_1_5_im),  // sfix18
                                  .dout_1_1_vld(dout_1_1_vld),
                                  .dout_1_re(dout_1_re),  // sfix19
                                  .dout_1_im(dout_1_im),  // sfix19
                                  .dout_2_re(dout_2_re),  // sfix19
                                  .dout_2_im(dout_2_im),  // sfix19
                                  .dout_2_vld(dout_2_vld)
                                  );

  assign dtc_im_2 = 17'sb00000000000000000;



  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        intdelay_reg_5[0] <= 17'sb00000000000000000;
        intdelay_reg_5[1] <= 17'sb00000000000000000;
        intdelay_reg_5[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_5[0] <= 17'sb00000000000000000;
            intdelay_reg_5[1] <= 17'sb00000000000000000;
            intdelay_reg_5[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg_5[0] <= intdelay_reg_next_5[0];
            intdelay_reg_5[1] <= intdelay_reg_next_5[1];
            intdelay_reg_5[2] <= intdelay_reg_next_5[2];
          end
        end
      end
    end

  assign din_1_2_re_dly = intdelay_reg_5[2];
  assign intdelay_reg_next_5[0] = dtc_im_2;
  assign intdelay_reg_next_5[1] = intdelay_reg_5[0];
  assign intdelay_reg_next_5[2] = intdelay_reg_5[1];



  assign dtc_re_2 = {1'b0, dataIn_1};



  always @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        intdelay_reg_6[0] <= 17'sb00000000000000000;
        intdelay_reg_6[1] <= 17'sb00000000000000000;
        intdelay_reg_6[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_6[0] <= 17'sb00000000000000000;
            intdelay_reg_6[1] <= 17'sb00000000000000000;
            intdelay_reg_6[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg_6[0] <= intdelay_reg_next_6[0];
            intdelay_reg_6[1] <= intdelay_reg_next_6[1];
            intdelay_reg_6[2] <= intdelay_reg_next_6[2];
          end
        end
      end
    end

  assign din_1_2_im_dly = intdelay_reg_6[2];
  assign intdelay_reg_next_6[0] = dtc_re_2;
  assign intdelay_reg_next_6[1] = intdelay_reg_6[0];
  assign intdelay_reg_next_6[2] = intdelay_reg_6[1];



  RADIX22FFT_SDF1_1_block u_SDF1_1_2 (.clk(clk),
                                      .reset(reset),
                                      .enb_1_8_0(enb_1_8_0),
                                      .din_1_2_re_dly(din_1_2_re_dly),  // sfix17
                                      .din_1_2_im_dly(din_1_2_im_dly),  // sfix17
                                      .din_1_vld_dly(din_1_vld_dly),
                                      .rd_1_Addr(rd_1_Addr),
                                      .rd_1_Enb(rd_1_Enb),
                                      .proc_1_enb(proc_1_enb),
                                      .dout_1_2_re(dout_1_2_re),  // sfix18
                                      .dout_1_2_im(dout_1_2_im)  // sfix18
                                      );

  assign dtc_im_3 = 17'sb00000000000000000;



  always @(posedge clk or posedge reset)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        intdelay_reg_7[0] <= 17'sb00000000000000000;
        intdelay_reg_7[1] <= 17'sb00000000000000000;
        intdelay_reg_7[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_7[0] <= 17'sb00000000000000000;
            intdelay_reg_7[1] <= 17'sb00000000000000000;
            intdelay_reg_7[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg_7[0] <= intdelay_reg_next_7[0];
            intdelay_reg_7[1] <= intdelay_reg_next_7[1];
            intdelay_reg_7[2] <= intdelay_reg_next_7[2];
          end
        end
      end
    end

  assign din_1_6_re_dly = intdelay_reg_7[2];
  assign intdelay_reg_next_7[0] = dtc_im_3;
  assign intdelay_reg_next_7[1] = intdelay_reg_7[0];
  assign intdelay_reg_next_7[2] = intdelay_reg_7[1];



  assign dtc_re_3 = {1'b0, dataIn_5};



  always @(posedge clk or posedge reset)
    begin : intdelay_8_process
      if (reset == 1'b1) begin
        intdelay_reg_8[0] <= 17'sb00000000000000000;
        intdelay_reg_8[1] <= 17'sb00000000000000000;
        intdelay_reg_8[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_8[0] <= 17'sb00000000000000000;
            intdelay_reg_8[1] <= 17'sb00000000000000000;
            intdelay_reg_8[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg_8[0] <= intdelay_reg_next_8[0];
            intdelay_reg_8[1] <= intdelay_reg_next_8[1];
            intdelay_reg_8[2] <= intdelay_reg_next_8[2];
          end
        end
      end
    end

  assign din_1_6_im_dly = intdelay_reg_8[2];
  assign intdelay_reg_next_8[0] = dtc_re_3;
  assign intdelay_reg_next_8[1] = intdelay_reg_8[0];
  assign intdelay_reg_next_8[2] = intdelay_reg_8[1];



  RADIX22FFT_SDF1_1_block4 u_SDF1_1_6 (.clk(clk),
                                       .reset(reset),
                                       .enb_1_8_0(enb_1_8_0),
                                       .din_1_6_re_dly(din_1_6_re_dly),  // sfix17
                                       .din_1_6_im_dly(din_1_6_im_dly),  // sfix17
                                       .din_1_vld_dly(din_1_vld_dly),
                                       .rd_1_Addr(rd_1_Addr),
                                       .rd_1_Enb(rd_1_Enb),
                                       .proc_1_enb(proc_1_enb),
                                       .dout_1_6_re(dout_1_6_re),  // sfix18
                                       .dout_1_6_im(dout_1_6_im)  // sfix18
                                       );

  RADIX22FFT_SDNF2_2_block u_SDNF2_2_3 (.clk(clk),
                                        .reset(reset),
                                        .enb_1_8_0(enb_1_8_0),
                                        .rotate_8(rotate_8),  // ufix1
                                        .dout_1_2_re(dout_1_2_re),  // sfix18
                                        .dout_1_2_im(dout_1_2_im),  // sfix18
                                        .dout_1_6_re(dout_1_6_re),  // sfix18
                                        .dout_1_6_im(dout_1_6_im),  // sfix18
                                        .dout_1_1_vld(dout_1_1_vld),
                                        .dout_3_re(dout_3_re),  // sfix19
                                        .dout_3_im(dout_3_im),  // sfix19
                                        .dout_4_re(dout_4_re),  // sfix19
                                        .dout_4_im(dout_4_im)  // sfix19
                                        );

  TWDLROM_3_2 u_twdlROM_3_2 (.clk(clk),
                             .reset(reset),
                             .enb_1_8_0(enb_1_8_0),
                             .dout_2_vld(dout_2_vld),
                             .twdl_3_2_re(twdl_3_2_re),  // sfix17_En15
                             .twdl_3_2_im(twdl_3_2_im)  // sfix17_En15
                             );

  TWDLMULT_SDNF1_3 u_TWDLMULT_SDNF1_3_1 (.clk(clk),
                                         .reset(reset),
                                         .enb_1_8_0(enb_1_8_0),
                                         .dout_1_re(dout_1_re),  // sfix19
                                         .dout_1_im(dout_1_im),  // sfix19
                                         .dout_3_re(dout_3_re),  // sfix19
                                         .dout_3_im(dout_3_im),  // sfix19
                                         .dout_2_vld(dout_2_vld),
                                         .twdl_3_2_re(twdl_3_2_re),  // sfix17_En15
                                         .twdl_3_2_im(twdl_3_2_im),  // sfix17_En15
                                         .twdlXdin_1_re(twdlXdin_1_re),  // sfix20
                                         .twdlXdin_1_im(twdlXdin_1_im),  // sfix20
                                         .twdlXdin_2_re(twdlXdin_2_re),  // sfix20
                                         .twdlXdin_2_im(twdlXdin_2_im),  // sfix20
                                         .twdlXdin_1_vld(twdlXdin_1_vld)
                                         );

  assign dtc_im_4 = 17'sb00000000000000000;



  always @(posedge clk or posedge reset)
    begin : intdelay_9_process
      if (reset == 1'b1) begin
        intdelay_reg_9[0] <= 17'sb00000000000000000;
        intdelay_reg_9[1] <= 17'sb00000000000000000;
        intdelay_reg_9[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_9[0] <= 17'sb00000000000000000;
            intdelay_reg_9[1] <= 17'sb00000000000000000;
            intdelay_reg_9[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg_9[0] <= intdelay_reg_next_9[0];
            intdelay_reg_9[1] <= intdelay_reg_next_9[1];
            intdelay_reg_9[2] <= intdelay_reg_next_9[2];
          end
        end
      end
    end

  assign din_1_3_re_dly = intdelay_reg_9[2];
  assign intdelay_reg_next_9[0] = dtc_im_4;
  assign intdelay_reg_next_9[1] = intdelay_reg_9[0];
  assign intdelay_reg_next_9[2] = intdelay_reg_9[1];



  assign dtc_re_4 = {1'b0, dataIn_2};



  always @(posedge clk or posedge reset)
    begin : intdelay_10_process
      if (reset == 1'b1) begin
        intdelay_reg_10[0] <= 17'sb00000000000000000;
        intdelay_reg_10[1] <= 17'sb00000000000000000;
        intdelay_reg_10[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_10[0] <= 17'sb00000000000000000;
            intdelay_reg_10[1] <= 17'sb00000000000000000;
            intdelay_reg_10[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg_10[0] <= intdelay_reg_next_10[0];
            intdelay_reg_10[1] <= intdelay_reg_next_10[1];
            intdelay_reg_10[2] <= intdelay_reg_next_10[2];
          end
        end
      end
    end

  assign din_1_3_im_dly = intdelay_reg_10[2];
  assign intdelay_reg_next_10[0] = dtc_re_4;
  assign intdelay_reg_next_10[1] = intdelay_reg_10[0];
  assign intdelay_reg_next_10[2] = intdelay_reg_10[1];



  RADIX22FFT_SDF1_1_block1 u_SDF1_1_3 (.clk(clk),
                                       .reset(reset),
                                       .enb_1_8_0(enb_1_8_0),
                                       .din_1_3_re_dly(din_1_3_re_dly),  // sfix17
                                       .din_1_3_im_dly(din_1_3_im_dly),  // sfix17
                                       .din_1_vld_dly(din_1_vld_dly),
                                       .rd_1_Addr(rd_1_Addr),
                                       .rd_1_Enb(rd_1_Enb),
                                       .proc_1_enb(proc_1_enb),
                                       .dout_1_3_re(dout_1_3_re),  // sfix18
                                       .dout_1_3_im(dout_1_3_im)  // sfix18
                                       );

  assign dtc_im_5 = 17'sb00000000000000000;



  always @(posedge clk or posedge reset)
    begin : intdelay_11_process
      if (reset == 1'b1) begin
        intdelay_reg_11[0] <= 17'sb00000000000000000;
        intdelay_reg_11[1] <= 17'sb00000000000000000;
        intdelay_reg_11[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_11[0] <= 17'sb00000000000000000;
            intdelay_reg_11[1] <= 17'sb00000000000000000;
            intdelay_reg_11[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg_11[0] <= intdelay_reg_next_11[0];
            intdelay_reg_11[1] <= intdelay_reg_next_11[1];
            intdelay_reg_11[2] <= intdelay_reg_next_11[2];
          end
        end
      end
    end

  assign din_1_7_re_dly = intdelay_reg_11[2];
  assign intdelay_reg_next_11[0] = dtc_im_5;
  assign intdelay_reg_next_11[1] = intdelay_reg_11[0];
  assign intdelay_reg_next_11[2] = intdelay_reg_11[1];



  assign dtc_re_5 = {1'b0, dataIn_6};



  always @(posedge clk or posedge reset)
    begin : intdelay_12_process
      if (reset == 1'b1) begin
        intdelay_reg_12[0] <= 17'sb00000000000000000;
        intdelay_reg_12[1] <= 17'sb00000000000000000;
        intdelay_reg_12[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_12[0] <= 17'sb00000000000000000;
            intdelay_reg_12[1] <= 17'sb00000000000000000;
            intdelay_reg_12[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg_12[0] <= intdelay_reg_next_12[0];
            intdelay_reg_12[1] <= intdelay_reg_next_12[1];
            intdelay_reg_12[2] <= intdelay_reg_next_12[2];
          end
        end
      end
    end

  assign din_1_7_im_dly = intdelay_reg_12[2];
  assign intdelay_reg_next_12[0] = dtc_re_5;
  assign intdelay_reg_next_12[1] = intdelay_reg_12[0];
  assign intdelay_reg_next_12[2] = intdelay_reg_12[1];



  RADIX22FFT_SDF1_1_block5 u_SDF1_1_7 (.clk(clk),
                                       .reset(reset),
                                       .enb_1_8_0(enb_1_8_0),
                                       .din_1_7_re_dly(din_1_7_re_dly),  // sfix17
                                       .din_1_7_im_dly(din_1_7_im_dly),  // sfix17
                                       .din_1_vld_dly(din_1_vld_dly),
                                       .rd_1_Addr(rd_1_Addr),
                                       .rd_1_Enb(rd_1_Enb),
                                       .proc_1_enb(proc_1_enb),
                                       .dout_1_7_re(dout_1_7_re),  // sfix18
                                       .dout_1_7_im(dout_1_7_im)  // sfix18
                                       );

  RADIX22FFT_SDNF2_2_block1 u_SDNF2_2_5 (.clk(clk),
                                         .reset(reset),
                                         .enb_1_8_0(enb_1_8_0),
                                         .rotate_8(rotate_8),  // ufix1
                                         .dout_1_3_re(dout_1_3_re),  // sfix18
                                         .dout_1_3_im(dout_1_3_im),  // sfix18
                                         .dout_1_7_re(dout_1_7_re),  // sfix18
                                         .dout_1_7_im(dout_1_7_im),  // sfix18
                                         .dout_1_1_vld(dout_1_1_vld),
                                         .dout_5_re(dout_5_re),  // sfix19
                                         .dout_5_im(dout_5_im),  // sfix19
                                         .dout_6_re(dout_6_re),  // sfix19
                                         .dout_6_im(dout_6_im)  // sfix19
                                         );

  assign dtc_im_6 = 17'sb00000000000000000;



  always @(posedge clk or posedge reset)
    begin : intdelay_13_process
      if (reset == 1'b1) begin
        intdelay_reg_13[0] <= 17'sb00000000000000000;
        intdelay_reg_13[1] <= 17'sb00000000000000000;
        intdelay_reg_13[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_13[0] <= 17'sb00000000000000000;
            intdelay_reg_13[1] <= 17'sb00000000000000000;
            intdelay_reg_13[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg_13[0] <= intdelay_reg_next_13[0];
            intdelay_reg_13[1] <= intdelay_reg_next_13[1];
            intdelay_reg_13[2] <= intdelay_reg_next_13[2];
          end
        end
      end
    end

  assign din_1_4_re_dly = intdelay_reg_13[2];
  assign intdelay_reg_next_13[0] = dtc_im_6;
  assign intdelay_reg_next_13[1] = intdelay_reg_13[0];
  assign intdelay_reg_next_13[2] = intdelay_reg_13[1];



  assign dtc_re_6 = {1'b0, dataIn_3};



  always @(posedge clk or posedge reset)
    begin : intdelay_14_process
      if (reset == 1'b1) begin
        intdelay_reg_14[0] <= 17'sb00000000000000000;
        intdelay_reg_14[1] <= 17'sb00000000000000000;
        intdelay_reg_14[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_14[0] <= 17'sb00000000000000000;
            intdelay_reg_14[1] <= 17'sb00000000000000000;
            intdelay_reg_14[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg_14[0] <= intdelay_reg_next_14[0];
            intdelay_reg_14[1] <= intdelay_reg_next_14[1];
            intdelay_reg_14[2] <= intdelay_reg_next_14[2];
          end
        end
      end
    end

  assign din_1_4_im_dly = intdelay_reg_14[2];
  assign intdelay_reg_next_14[0] = dtc_re_6;
  assign intdelay_reg_next_14[1] = intdelay_reg_14[0];
  assign intdelay_reg_next_14[2] = intdelay_reg_14[1];



  RADIX22FFT_SDF1_1_block2 u_SDF1_1_4 (.clk(clk),
                                       .reset(reset),
                                       .enb_1_8_0(enb_1_8_0),
                                       .din_1_4_re_dly(din_1_4_re_dly),  // sfix17
                                       .din_1_4_im_dly(din_1_4_im_dly),  // sfix17
                                       .din_1_vld_dly(din_1_vld_dly),
                                       .rd_1_Addr(rd_1_Addr),
                                       .rd_1_Enb(rd_1_Enb),
                                       .proc_1_enb(proc_1_enb),
                                       .dout_1_4_re(dout_1_4_re),  // sfix18
                                       .dout_1_4_im(dout_1_4_im)  // sfix18
                                       );

  assign dtc_im_7 = 17'sb00000000000000000;



  always @(posedge clk or posedge reset)
    begin : intdelay_15_process
      if (reset == 1'b1) begin
        intdelay_reg_15[0] <= 17'sb00000000000000000;
        intdelay_reg_15[1] <= 17'sb00000000000000000;
        intdelay_reg_15[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_15[0] <= 17'sb00000000000000000;
            intdelay_reg_15[1] <= 17'sb00000000000000000;
            intdelay_reg_15[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg_15[0] <= intdelay_reg_next_15[0];
            intdelay_reg_15[1] <= intdelay_reg_next_15[1];
            intdelay_reg_15[2] <= intdelay_reg_next_15[2];
          end
        end
      end
    end

  assign din_1_8_re_dly = intdelay_reg_15[2];
  assign intdelay_reg_next_15[0] = dtc_im_7;
  assign intdelay_reg_next_15[1] = intdelay_reg_15[0];
  assign intdelay_reg_next_15[2] = intdelay_reg_15[1];



  assign dtc_re_7 = {1'b0, dataIn_7};



  always @(posedge clk or posedge reset)
    begin : intdelay_16_process
      if (reset == 1'b1) begin
        intdelay_reg_16[0] <= 17'sb00000000000000000;
        intdelay_reg_16[1] <= 17'sb00000000000000000;
        intdelay_reg_16[2] <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_16[0] <= 17'sb00000000000000000;
            intdelay_reg_16[1] <= 17'sb00000000000000000;
            intdelay_reg_16[2] <= 17'sb00000000000000000;
          end
          else begin
            intdelay_reg_16[0] <= intdelay_reg_next_16[0];
            intdelay_reg_16[1] <= intdelay_reg_next_16[1];
            intdelay_reg_16[2] <= intdelay_reg_next_16[2];
          end
        end
      end
    end

  assign din_1_8_im_dly = intdelay_reg_16[2];
  assign intdelay_reg_next_16[0] = dtc_re_7;
  assign intdelay_reg_next_16[1] = intdelay_reg_16[0];
  assign intdelay_reg_next_16[2] = intdelay_reg_16[1];



  RADIX22FFT_SDF1_1_block6 u_SDF1_1_8 (.clk(clk),
                                       .reset(reset),
                                       .enb_1_8_0(enb_1_8_0),
                                       .din_1_8_re_dly(din_1_8_re_dly),  // sfix17
                                       .din_1_8_im_dly(din_1_8_im_dly),  // sfix17
                                       .din_1_vld_dly(din_1_vld_dly),
                                       .rd_1_Addr(rd_1_Addr),
                                       .rd_1_Enb(rd_1_Enb),
                                       .proc_1_enb(proc_1_enb),
                                       .dout_1_8_re(dout_1_8_re),  // sfix18
                                       .dout_1_8_im(dout_1_8_im)  // sfix18
                                       );

  RADIX22FFT_SDNF2_2_block2 u_SDNF2_2_7 (.clk(clk),
                                         .reset(reset),
                                         .enb_1_8_0(enb_1_8_0),
                                         .rotate_8(rotate_8),  // ufix1
                                         .dout_1_4_re(dout_1_4_re),  // sfix18
                                         .dout_1_4_im(dout_1_4_im),  // sfix18
                                         .dout_1_8_re(dout_1_8_re),  // sfix18
                                         .dout_1_8_im(dout_1_8_im),  // sfix18
                                         .dout_1_1_vld(dout_1_1_vld),
                                         .dout_7_re(dout_7_re),  // sfix19
                                         .dout_7_im(dout_7_im),  // sfix19
                                         .dout_8_re(dout_8_re),  // sfix19
                                         .dout_8_im(dout_8_im)  // sfix19
                                         );

  TWDLROM_3_3 u_twdlROM_3_3 (.clk(clk),
                             .reset(reset),
                             .enb_1_8_0(enb_1_8_0),
                             .dout_2_vld(dout_2_vld),
                             .twdl_3_3_re(twdl_3_3_re),  // sfix17_En15
                             .twdl_3_3_im(twdl_3_3_im)  // sfix17_En15
                             );

  TWDLROM_3_4 u_twdlROM_3_4 (.clk(clk),
                             .reset(reset),
                             .enb_1_8_0(enb_1_8_0),
                             .dout_2_vld(dout_2_vld),
                             .twdl_3_4_re(twdl_3_4_re),  // sfix17_En15
                             .twdl_3_4_im(twdl_3_4_im)  // sfix17_En15
                             );

  TWDLMULT_SDNF1_3_block u_TWDLMULT_SDNF1_3_3 (.clk(clk),
                                               .reset(reset),
                                               .enb_1_8_0(enb_1_8_0),
                                               .dout_5_re(dout_5_re),  // sfix19
                                               .dout_5_im(dout_5_im),  // sfix19
                                               .dout_7_re(dout_7_re),  // sfix19
                                               .dout_7_im(dout_7_im),  // sfix19
                                               .dout_2_vld(dout_2_vld),
                                               .twdl_3_3_re(twdl_3_3_re),  // sfix17_En15
                                               .twdl_3_3_im(twdl_3_3_im),  // sfix17_En15
                                               .twdl_3_4_re(twdl_3_4_re),  // sfix17_En15
                                               .twdl_3_4_im(twdl_3_4_im),  // sfix17_En15
                                               .twdlXdin_3_re(twdlXdin_3_re),  // sfix20
                                               .twdlXdin_3_im(twdlXdin_3_im),  // sfix20
                                               .twdlXdin_4_re(twdlXdin_4_re),  // sfix20
                                               .twdlXdin_4_im(twdlXdin_4_im)  // sfix20
                                               );

  RADIX22FFT_SDNF1_3 u_SDNF1_3_1 (.clk(clk),
                                  .reset(reset),
                                  .enb_1_8_0(enb_1_8_0),
                                  .twdlXdin_1_re(twdlXdin_1_re),  // sfix20
                                  .twdlXdin_1_im(twdlXdin_1_im),  // sfix20
                                  .twdlXdin_3_re(twdlXdin_3_re),  // sfix20
                                  .twdlXdin_3_im(twdlXdin_3_im),  // sfix20
                                  .twdlXdin_1_vld(twdlXdin_1_vld),
                                  .dout_1_re(dout_1_re_1),  // sfix20
                                  .dout_1_im(dout_1_im_1),  // sfix20
                                  .dout_2_re(dout_2_re_1),  // sfix20
                                  .dout_2_im(dout_2_im_1),  // sfix20
                                  .dout_1_vld(dout_1_vld)
                                  );

  RADIX22FFT_SDNF1_3_block u_SDNF1_3_3 (.clk(clk),
                                        .reset(reset),
                                        .enb_1_8_0(enb_1_8_0),
                                        .twdlXdin_2_re(twdlXdin_2_re),  // sfix20
                                        .twdlXdin_2_im(twdlXdin_2_im),  // sfix20
                                        .twdlXdin_4_re(twdlXdin_4_re),  // sfix20
                                        .twdlXdin_4_im(twdlXdin_4_im),  // sfix20
                                        .twdlXdin_1_vld(twdlXdin_1_vld),
                                        .dout_3_re(dout_3_re_1),  // sfix20
                                        .dout_3_im(dout_3_im_1),  // sfix20
                                        .dout_4_re(dout_4_re_1),  // sfix20
                                        .dout_4_im(dout_4_im_1)  // sfix20
                                        );

  RADIX22FFT_SDNF2_4 u_SDNF2_4_1 (.clk(clk),
                                  .reset(reset),
                                  .enb_1_8_0(enb_1_8_0),
                                  .rotate_1(rotate_1),  // ufix1
                                  .dout_1_re(dout_1_re_1),  // sfix20
                                  .dout_1_im(dout_1_im_1),  // sfix20
                                  .dout_3_re(dout_3_re_1),  // sfix20
                                  .dout_3_im(dout_3_im_1),  // sfix20
                                  .dout_1_vld(dout_1_vld),
                                  .dout_1_re_1(dout_1_re_2),  // sfix21
                                  .dout_1_im_1(dout_1_im_2),  // sfix21
                                  .dout_2_re(dout_2_re_2),  // sfix21
                                  .dout_2_im(dout_2_im_2),  // sfix21
                                  .dout_4_vld(dout_4_vld)
                                  );

  assign rotate_3 = 1'b1;



  RADIX22FFT_SDNF2_4_block u_SDNF2_4_3 (.clk(clk),
                                        .reset(reset),
                                        .enb_1_8_0(enb_1_8_0),
                                        .rotate_3(rotate_3),  // ufix1
                                        .dout_2_re(dout_2_re_1),  // sfix20
                                        .dout_2_im(dout_2_im_1),  // sfix20
                                        .dout_4_re(dout_4_re_1),  // sfix20
                                        .dout_4_im(dout_4_im_1),  // sfix20
                                        .dout_1_vld(dout_1_vld),
                                        .dout_3_re(dout_3_re_2),  // sfix21
                                        .dout_3_im(dout_3_im_2),  // sfix21
                                        .dout_4_re_1(dout_4_re_2),  // sfix21
                                        .dout_4_im_1(dout_4_im_2)  // sfix21
                                        );

  assign rotate_5 = 1'b0;



  TWDLROM_3_6 u_twdlROM_3_6 (.clk(clk),
                             .reset(reset),
                             .enb_1_8_0(enb_1_8_0),
                             .dout_2_vld(dout_2_vld),
                             .twdl_3_6_re(twdl_3_6_re),  // sfix17_En15
                             .twdl_3_6_im(twdl_3_6_im)  // sfix17_En15
                             );

  TWDLMULT_SDNF1_3_block1 u_TWDLMULT_SDNF1_3_5 (.clk(clk),
                                                .reset(reset),
                                                .enb_1_8_0(enb_1_8_0),
                                                .dout_2_re(dout_2_re),  // sfix19
                                                .dout_2_im(dout_2_im),  // sfix19
                                                .dout_4_re(dout_4_re),  // sfix19
                                                .dout_4_im(dout_4_im),  // sfix19
                                                .dout_2_vld(dout_2_vld),
                                                .twdl_3_6_re(twdl_3_6_re),  // sfix17_En15
                                                .twdl_3_6_im(twdl_3_6_im),  // sfix17_En15
                                                .twdlXdin_5_re(twdlXdin_5_re),  // sfix20
                                                .twdlXdin_5_im(twdlXdin_5_im),  // sfix20
                                                .twdlXdin_6_re(twdlXdin_6_re),  // sfix20
                                                .twdlXdin_6_im(twdlXdin_6_im)  // sfix20
                                                );

  TWDLROM_3_7 u_twdlROM_3_7 (.clk(clk),
                             .reset(reset),
                             .enb_1_8_0(enb_1_8_0),
                             .dout_2_vld(dout_2_vld),
                             .twdl_3_7_re(twdl_3_7_re),  // sfix17_En15
                             .twdl_3_7_im(twdl_3_7_im)  // sfix17_En15
                             );

  TWDLROM_3_8 u_twdlROM_3_8 (.clk(clk),
                             .reset(reset),
                             .enb_1_8_0(enb_1_8_0),
                             .dout_2_vld(dout_2_vld),
                             .twdl_3_8_re(twdl_3_8_re),  // sfix17_En15
                             .twdl_3_8_im(twdl_3_8_im)  // sfix17_En15
                             );

  TWDLMULT_SDNF1_3_block2 u_TWDLMULT_SDNF1_3_7 (.clk(clk),
                                                .reset(reset),
                                                .enb_1_8_0(enb_1_8_0),
                                                .dout_6_re(dout_6_re),  // sfix19
                                                .dout_6_im(dout_6_im),  // sfix19
                                                .dout_8_re(dout_8_re),  // sfix19
                                                .dout_8_im(dout_8_im),  // sfix19
                                                .dout_2_vld(dout_2_vld),
                                                .twdl_3_7_re(twdl_3_7_re),  // sfix17_En15
                                                .twdl_3_7_im(twdl_3_7_im),  // sfix17_En15
                                                .twdl_3_8_re(twdl_3_8_re),  // sfix17_En15
                                                .twdl_3_8_im(twdl_3_8_im),  // sfix17_En15
                                                .twdlXdin_7_re(twdlXdin_7_re),  // sfix20
                                                .twdlXdin_7_im(twdlXdin_7_im),  // sfix20
                                                .twdlXdin_8_re(twdlXdin_8_re),  // sfix20
                                                .twdlXdin_8_im(twdlXdin_8_im)  // sfix20
                                                );

  RADIX22FFT_SDNF1_3_block1 u_SDNF1_3_5 (.clk(clk),
                                         .reset(reset),
                                         .enb_1_8_0(enb_1_8_0),
                                         .twdlXdin_5_re(twdlXdin_5_re),  // sfix20
                                         .twdlXdin_5_im(twdlXdin_5_im),  // sfix20
                                         .twdlXdin_7_re(twdlXdin_7_re),  // sfix20
                                         .twdlXdin_7_im(twdlXdin_7_im),  // sfix20
                                         .twdlXdin_1_vld(twdlXdin_1_vld),
                                         .dout_5_re(dout_5_re_1),  // sfix20
                                         .dout_5_im(dout_5_im_1),  // sfix20
                                         .dout_6_re(dout_6_re_1),  // sfix20
                                         .dout_6_im(dout_6_im_1)  // sfix20
                                         );

  RADIX22FFT_SDNF1_3_block2 u_SDNF1_3_7 (.clk(clk),
                                         .reset(reset),
                                         .enb_1_8_0(enb_1_8_0),
                                         .twdlXdin_6_re(twdlXdin_6_re),  // sfix20
                                         .twdlXdin_6_im(twdlXdin_6_im),  // sfix20
                                         .twdlXdin_8_re(twdlXdin_8_re),  // sfix20
                                         .twdlXdin_8_im(twdlXdin_8_im),  // sfix20
                                         .twdlXdin_1_vld(twdlXdin_1_vld),
                                         .dout_7_re(dout_7_re_1),  // sfix20
                                         .dout_7_im(dout_7_im_1),  // sfix20
                                         .dout_8_re(dout_8_re_1),  // sfix20
                                         .dout_8_im(dout_8_im_1)  // sfix20
                                         );

  RADIX22FFT_SDNF2_4_block1 u_SDNF2_4_5 (.clk(clk),
                                         .reset(reset),
                                         .enb_1_8_0(enb_1_8_0),
                                         .rotate_5(rotate_5),  // ufix1
                                         .dout_5_re(dout_5_re_1),  // sfix20
                                         .dout_5_im(dout_5_im_1),  // sfix20
                                         .dout_7_re(dout_7_re_1),  // sfix20
                                         .dout_7_im(dout_7_im_1),  // sfix20
                                         .dout_1_vld(dout_1_vld),
                                         .dout_5_re_1(dout_5_re_2),  // sfix21
                                         .dout_5_im_1(dout_5_im_2),  // sfix21
                                         .dout_6_re(dout_6_re_2),  // sfix21
                                         .dout_6_im(dout_6_im_2)  // sfix21
                                         );

  assign rotate_7 = 1'b1;



  RADIX22FFT_SDNF2_4_block2 u_SDNF2_4_7 (.clk(clk),
                                         .reset(reset),
                                         .enb_1_8_0(enb_1_8_0),
                                         .rotate_7(rotate_7),  // ufix1
                                         .dout_6_re(dout_6_re_1),  // sfix20
                                         .dout_6_im(dout_6_im_1),  // sfix20
                                         .dout_8_re(dout_8_re_1),  // sfix20
                                         .dout_8_im(dout_8_im_1),  // sfix20
                                         .dout_1_vld(dout_1_vld),
                                         .dout_7_re(dout_7_re_2),  // sfix21
                                         .dout_7_im(dout_7_im_2),  // sfix21
                                         .dout_8_re_1(dout_8_re_2),  // sfix21
                                         .dout_8_im_1(dout_8_im_2)  // sfix21
                                         );

  RADIX22FFT_bitNatural_1 u_NaturalOrder_Stage (.clk(clk),
                                                .reset(reset),
                                                .enb_1_8_0(enb_1_8_0),
                                                .dout_re_v_0(dout_1_re_2),  // sfix21
                                                .dout_re_v_1(dout_2_re_2),  // sfix21
                                                .dout_re_v_2(dout_3_re_2),  // sfix21
                                                .dout_re_v_3(dout_4_re_2),  // sfix21
                                                .dout_re_v_4(dout_5_re_2),  // sfix21
                                                .dout_re_v_5(dout_6_re_2),  // sfix21
                                                .dout_re_v_6(dout_7_re_2),  // sfix21
                                                .dout_re_v_7(dout_8_re_2),  // sfix21
                                                .dout_im_v_0(dout_1_im_2),  // sfix21
                                                .dout_im_v_1(dout_2_im_2),  // sfix21
                                                .dout_im_v_2(dout_3_im_2),  // sfix21
                                                .dout_im_v_3(dout_4_im_2),  // sfix21
                                                .dout_im_v_4(dout_5_im_2),  // sfix21
                                                .dout_im_v_5(dout_6_im_2),  // sfix21
                                                .dout_im_v_6(dout_7_im_2),  // sfix21
                                                .dout_im_v_7(dout_8_im_2),  // sfix21
                                                .dout_4_vld(dout_4_vld),
                                                .dMem_im1(dMem_im1),  // sfix21
                                                .dMem_vld1(dMem_vld1)
                                                );

  RADIX22FFT_bitNatural_2 u_NaturalOrder_Stage_1 (.clk(clk),
                                                  .reset(reset),
                                                  .enb_1_8_0(enb_1_8_0),
                                                  .dout_re_v_0(dout_1_re_2),  // sfix21
                                                  .dout_re_v_1(dout_2_re_2),  // sfix21
                                                  .dout_re_v_2(dout_3_re_2),  // sfix21
                                                  .dout_re_v_3(dout_4_re_2),  // sfix21
                                                  .dout_re_v_4(dout_5_re_2),  // sfix21
                                                  .dout_re_v_5(dout_6_re_2),  // sfix21
                                                  .dout_re_v_6(dout_7_re_2),  // sfix21
                                                  .dout_re_v_7(dout_8_re_2),  // sfix21
                                                  .dout_im_v_0(dout_1_im_2),  // sfix21
                                                  .dout_im_v_1(dout_2_im_2),  // sfix21
                                                  .dout_im_v_2(dout_3_im_2),  // sfix21
                                                  .dout_im_v_3(dout_4_im_2),  // sfix21
                                                  .dout_im_v_4(dout_5_im_2),  // sfix21
                                                  .dout_im_v_5(dout_6_im_2),  // sfix21
                                                  .dout_im_v_6(dout_7_im_2),  // sfix21
                                                  .dout_im_v_7(dout_8_im_2),  // sfix21
                                                  .dout_4_vld(dout_4_vld),
                                                  .dMem_im2(dMem_im2)  // sfix21
                                                  );

  RADIX22FFT_bitNatural_3 u_NaturalOrder_Stage_2 (.clk(clk),
                                                  .reset(reset),
                                                  .enb_1_8_0(enb_1_8_0),
                                                  .dout_re_v_0(dout_1_re_2),  // sfix21
                                                  .dout_re_v_1(dout_2_re_2),  // sfix21
                                                  .dout_re_v_2(dout_3_re_2),  // sfix21
                                                  .dout_re_v_3(dout_4_re_2),  // sfix21
                                                  .dout_re_v_4(dout_5_re_2),  // sfix21
                                                  .dout_re_v_5(dout_6_re_2),  // sfix21
                                                  .dout_re_v_6(dout_7_re_2),  // sfix21
                                                  .dout_re_v_7(dout_8_re_2),  // sfix21
                                                  .dout_im_v_0(dout_1_im_2),  // sfix21
                                                  .dout_im_v_1(dout_2_im_2),  // sfix21
                                                  .dout_im_v_2(dout_3_im_2),  // sfix21
                                                  .dout_im_v_3(dout_4_im_2),  // sfix21
                                                  .dout_im_v_4(dout_5_im_2),  // sfix21
                                                  .dout_im_v_5(dout_6_im_2),  // sfix21
                                                  .dout_im_v_6(dout_7_im_2),  // sfix21
                                                  .dout_im_v_7(dout_8_im_2),  // sfix21
                                                  .dout_4_vld(dout_4_vld),
                                                  .dMem_im3(dMem_im3)  // sfix21
                                                  );

  RADIX22FFT_bitNatural_4 u_NaturalOrder_Stage_3 (.clk(clk),
                                                  .reset(reset),
                                                  .enb_1_8_0(enb_1_8_0),
                                                  .dout_re_v_0(dout_1_re_2),  // sfix21
                                                  .dout_re_v_1(dout_2_re_2),  // sfix21
                                                  .dout_re_v_2(dout_3_re_2),  // sfix21
                                                  .dout_re_v_3(dout_4_re_2),  // sfix21
                                                  .dout_re_v_4(dout_5_re_2),  // sfix21
                                                  .dout_re_v_5(dout_6_re_2),  // sfix21
                                                  .dout_re_v_6(dout_7_re_2),  // sfix21
                                                  .dout_re_v_7(dout_8_re_2),  // sfix21
                                                  .dout_im_v_0(dout_1_im_2),  // sfix21
                                                  .dout_im_v_1(dout_2_im_2),  // sfix21
                                                  .dout_im_v_2(dout_3_im_2),  // sfix21
                                                  .dout_im_v_3(dout_4_im_2),  // sfix21
                                                  .dout_im_v_4(dout_5_im_2),  // sfix21
                                                  .dout_im_v_5(dout_6_im_2),  // sfix21
                                                  .dout_im_v_6(dout_7_im_2),  // sfix21
                                                  .dout_im_v_7(dout_8_im_2),  // sfix21
                                                  .dout_4_vld(dout_4_vld),
                                                  .dMem_im4(dMem_im4)  // sfix21
                                                  );

  RADIX22FFT_bitNatural_5 u_NaturalOrder_Stage_4 (.clk(clk),
                                                  .reset(reset),
                                                  .enb_1_8_0(enb_1_8_0),
                                                  .dout_re_v_0(dout_1_re_2),  // sfix21
                                                  .dout_re_v_1(dout_2_re_2),  // sfix21
                                                  .dout_re_v_2(dout_3_re_2),  // sfix21
                                                  .dout_re_v_3(dout_4_re_2),  // sfix21
                                                  .dout_re_v_4(dout_5_re_2),  // sfix21
                                                  .dout_re_v_5(dout_6_re_2),  // sfix21
                                                  .dout_re_v_6(dout_7_re_2),  // sfix21
                                                  .dout_re_v_7(dout_8_re_2),  // sfix21
                                                  .dout_im_v_0(dout_1_im_2),  // sfix21
                                                  .dout_im_v_1(dout_2_im_2),  // sfix21
                                                  .dout_im_v_2(dout_3_im_2),  // sfix21
                                                  .dout_im_v_3(dout_4_im_2),  // sfix21
                                                  .dout_im_v_4(dout_5_im_2),  // sfix21
                                                  .dout_im_v_5(dout_6_im_2),  // sfix21
                                                  .dout_im_v_6(dout_7_im_2),  // sfix21
                                                  .dout_im_v_7(dout_8_im_2),  // sfix21
                                                  .dout_4_vld(dout_4_vld),
                                                  .dMem_im5(dMem_im5)  // sfix21
                                                  );

  RADIX22FFT_bitNatural_6 u_NaturalOrder_Stage_5 (.clk(clk),
                                                  .reset(reset),
                                                  .enb_1_8_0(enb_1_8_0),
                                                  .dout_re_v_0(dout_1_re_2),  // sfix21
                                                  .dout_re_v_1(dout_2_re_2),  // sfix21
                                                  .dout_re_v_2(dout_3_re_2),  // sfix21
                                                  .dout_re_v_3(dout_4_re_2),  // sfix21
                                                  .dout_re_v_4(dout_5_re_2),  // sfix21
                                                  .dout_re_v_5(dout_6_re_2),  // sfix21
                                                  .dout_re_v_6(dout_7_re_2),  // sfix21
                                                  .dout_re_v_7(dout_8_re_2),  // sfix21
                                                  .dout_im_v_0(dout_1_im_2),  // sfix21
                                                  .dout_im_v_1(dout_2_im_2),  // sfix21
                                                  .dout_im_v_2(dout_3_im_2),  // sfix21
                                                  .dout_im_v_3(dout_4_im_2),  // sfix21
                                                  .dout_im_v_4(dout_5_im_2),  // sfix21
                                                  .dout_im_v_5(dout_6_im_2),  // sfix21
                                                  .dout_im_v_6(dout_7_im_2),  // sfix21
                                                  .dout_im_v_7(dout_8_im_2),  // sfix21
                                                  .dout_4_vld(dout_4_vld),
                                                  .dMem_im6(dMem_im6)  // sfix21
                                                  );

  RADIX22FFT_bitNatural_7 u_NaturalOrder_Stage_6 (.clk(clk),
                                                  .reset(reset),
                                                  .enb_1_8_0(enb_1_8_0),
                                                  .dout_re_v_0(dout_1_re_2),  // sfix21
                                                  .dout_re_v_1(dout_2_re_2),  // sfix21
                                                  .dout_re_v_2(dout_3_re_2),  // sfix21
                                                  .dout_re_v_3(dout_4_re_2),  // sfix21
                                                  .dout_re_v_4(dout_5_re_2),  // sfix21
                                                  .dout_re_v_5(dout_6_re_2),  // sfix21
                                                  .dout_re_v_6(dout_7_re_2),  // sfix21
                                                  .dout_re_v_7(dout_8_re_2),  // sfix21
                                                  .dout_im_v_0(dout_1_im_2),  // sfix21
                                                  .dout_im_v_1(dout_2_im_2),  // sfix21
                                                  .dout_im_v_2(dout_3_im_2),  // sfix21
                                                  .dout_im_v_3(dout_4_im_2),  // sfix21
                                                  .dout_im_v_4(dout_5_im_2),  // sfix21
                                                  .dout_im_v_5(dout_6_im_2),  // sfix21
                                                  .dout_im_v_6(dout_7_im_2),  // sfix21
                                                  .dout_im_v_7(dout_8_im_2),  // sfix21
                                                  .dout_4_vld(dout_4_vld),
                                                  .dMem_im7(dMem_im7)  // sfix21
                                                  );

  RADIX22FFT_bitNatural_8 u_NaturalOrder_Stage_7 (.clk(clk),
                                                  .reset(reset),
                                                  .enb_1_8_0(enb_1_8_0),
                                                  .dout_re_v_0(dout_1_re_2),  // sfix21
                                                  .dout_re_v_1(dout_2_re_2),  // sfix21
                                                  .dout_re_v_2(dout_3_re_2),  // sfix21
                                                  .dout_re_v_3(dout_4_re_2),  // sfix21
                                                  .dout_re_v_4(dout_5_re_2),  // sfix21
                                                  .dout_re_v_5(dout_6_re_2),  // sfix21
                                                  .dout_re_v_6(dout_7_re_2),  // sfix21
                                                  .dout_re_v_7(dout_8_re_2),  // sfix21
                                                  .dout_im_v_0(dout_1_im_2),  // sfix21
                                                  .dout_im_v_1(dout_2_im_2),  // sfix21
                                                  .dout_im_v_2(dout_3_im_2),  // sfix21
                                                  .dout_im_v_3(dout_4_im_2),  // sfix21
                                                  .dout_im_v_4(dout_5_im_2),  // sfix21
                                                  .dout_im_v_5(dout_6_im_2),  // sfix21
                                                  .dout_im_v_6(dout_7_im_2),  // sfix21
                                                  .dout_im_v_7(dout_8_im_2),  // sfix21
                                                  .dout_4_vld(dout_4_vld),
                                                  .dMem_im8(dMem_im8)  // sfix21
                                                  );

  RADIX22FFT_bitNaturalMux_1 u_NaturalOrder_OutMux (.clk(clk),
                                                    .reset(reset),
                                                    .enb_1_8_0(enb_1_8_0),
                                                    .dMem_im_v_0(dMem_im1),  // sfix21
                                                    .dMem_im_v_1(dMem_im2),  // sfix21
                                                    .dMem_im_v_2(dMem_im3),  // sfix21
                                                    .dMem_im_v_3(dMem_im4),  // sfix21
                                                    .dMem_im_v_4(dMem_im5),  // sfix21
                                                    .dMem_im_v_5(dMem_im6),  // sfix21
                                                    .dMem_im_v_6(dMem_im7),  // sfix21
                                                    .dMem_im_v_7(dMem_im8),  // sfix21
                                                    .dMem_vld1(dMem_vld1),
                                                    .dMux_im1(dMux_im1),  // sfix21
                                                    .dMux_vld1(dMux_vld1)
                                                    );

  assign dataOut_re_0 = dMux_im1;

  RADIX22FFT_bitNaturalMux_2 u_NaturalOrder_OutMux_1 (.clk(clk),
                                                      .reset(reset),
                                                      .enb_1_8_0(enb_1_8_0),
                                                      .dMem_im_v_0(dMem_im1),  // sfix21
                                                      .dMem_im_v_1(dMem_im2),  // sfix21
                                                      .dMem_im_v_2(dMem_im3),  // sfix21
                                                      .dMem_im_v_3(dMem_im4),  // sfix21
                                                      .dMem_im_v_4(dMem_im5),  // sfix21
                                                      .dMem_im_v_5(dMem_im6),  // sfix21
                                                      .dMem_im_v_6(dMem_im7),  // sfix21
                                                      .dMem_im_v_7(dMem_im8),  // sfix21
                                                      .dMem_vld1(dMem_vld1),
                                                      .dMux_im2(dMux_im2)  // sfix21
                                                      );

  assign dataOut_re_1 = dMux_im2;

  RADIX22FFT_bitNaturalMux_3 u_NaturalOrder_OutMux_2 (.clk(clk),
                                                      .reset(reset),
                                                      .enb_1_8_0(enb_1_8_0),
                                                      .dMem_im_v_0(dMem_im1),  // sfix21
                                                      .dMem_im_v_1(dMem_im2),  // sfix21
                                                      .dMem_im_v_2(dMem_im3),  // sfix21
                                                      .dMem_im_v_3(dMem_im4),  // sfix21
                                                      .dMem_im_v_4(dMem_im5),  // sfix21
                                                      .dMem_im_v_5(dMem_im6),  // sfix21
                                                      .dMem_im_v_6(dMem_im7),  // sfix21
                                                      .dMem_im_v_7(dMem_im8),  // sfix21
                                                      .dMem_vld1(dMem_vld1),
                                                      .dMux_im3(dMux_im3)  // sfix21
                                                      );

  assign dataOut_re_2 = dMux_im3;

  RADIX22FFT_bitNaturalMux_4 u_NaturalOrder_OutMux_3 (.clk(clk),
                                                      .reset(reset),
                                                      .enb_1_8_0(enb_1_8_0),
                                                      .dMem_im_v_0(dMem_im1),  // sfix21
                                                      .dMem_im_v_1(dMem_im2),  // sfix21
                                                      .dMem_im_v_2(dMem_im3),  // sfix21
                                                      .dMem_im_v_3(dMem_im4),  // sfix21
                                                      .dMem_im_v_4(dMem_im5),  // sfix21
                                                      .dMem_im_v_5(dMem_im6),  // sfix21
                                                      .dMem_im_v_6(dMem_im7),  // sfix21
                                                      .dMem_im_v_7(dMem_im8),  // sfix21
                                                      .dMem_vld1(dMem_vld1),
                                                      .dMux_im4(dMux_im4)  // sfix21
                                                      );

  assign dataOut_re_3 = dMux_im4;

  RADIX22FFT_bitNaturalMux_5 u_NaturalOrder_OutMux_4 (.clk(clk),
                                                      .reset(reset),
                                                      .enb_1_8_0(enb_1_8_0),
                                                      .dMem_im_v_0(dMem_im1),  // sfix21
                                                      .dMem_im_v_1(dMem_im2),  // sfix21
                                                      .dMem_im_v_2(dMem_im3),  // sfix21
                                                      .dMem_im_v_3(dMem_im4),  // sfix21
                                                      .dMem_im_v_4(dMem_im5),  // sfix21
                                                      .dMem_im_v_5(dMem_im6),  // sfix21
                                                      .dMem_im_v_6(dMem_im7),  // sfix21
                                                      .dMem_im_v_7(dMem_im8),  // sfix21
                                                      .dMem_vld1(dMem_vld1),
                                                      .dMux_im5(dMux_im5)  // sfix21
                                                      );

  assign dataOut_re_4 = dMux_im5;

  RADIX22FFT_bitNaturalMux_6 u_NaturalOrder_OutMux_5 (.clk(clk),
                                                      .reset(reset),
                                                      .enb_1_8_0(enb_1_8_0),
                                                      .dMem_im_v_0(dMem_im1),  // sfix21
                                                      .dMem_im_v_1(dMem_im2),  // sfix21
                                                      .dMem_im_v_2(dMem_im3),  // sfix21
                                                      .dMem_im_v_3(dMem_im4),  // sfix21
                                                      .dMem_im_v_4(dMem_im5),  // sfix21
                                                      .dMem_im_v_5(dMem_im6),  // sfix21
                                                      .dMem_im_v_6(dMem_im7),  // sfix21
                                                      .dMem_im_v_7(dMem_im8),  // sfix21
                                                      .dMem_vld1(dMem_vld1),
                                                      .dMux_im6(dMux_im6)  // sfix21
                                                      );

  assign dataOut_re_5 = dMux_im6;

  RADIX22FFT_bitNaturalMux_7 u_NaturalOrder_OutMux_6 (.clk(clk),
                                                      .reset(reset),
                                                      .enb_1_8_0(enb_1_8_0),
                                                      .dMem_im_v_0(dMem_im1),  // sfix21
                                                      .dMem_im_v_1(dMem_im2),  // sfix21
                                                      .dMem_im_v_2(dMem_im3),  // sfix21
                                                      .dMem_im_v_3(dMem_im4),  // sfix21
                                                      .dMem_im_v_4(dMem_im5),  // sfix21
                                                      .dMem_im_v_5(dMem_im6),  // sfix21
                                                      .dMem_im_v_6(dMem_im7),  // sfix21
                                                      .dMem_im_v_7(dMem_im8),  // sfix21
                                                      .dMem_vld1(dMem_vld1),
                                                      .dMux_im7(dMux_im7)  // sfix21
                                                      );

  assign dataOut_re_6 = dMux_im7;

  RADIX22FFT_bitNaturalMux_8 u_NaturalOrder_OutMux_7 (.clk(clk),
                                                      .reset(reset),
                                                      .enb_1_8_0(enb_1_8_0),
                                                      .dMem_im_v_0(dMem_im1),  // sfix21
                                                      .dMem_im_v_1(dMem_im2),  // sfix21
                                                      .dMem_im_v_2(dMem_im3),  // sfix21
                                                      .dMem_im_v_3(dMem_im4),  // sfix21
                                                      .dMem_im_v_4(dMem_im5),  // sfix21
                                                      .dMem_im_v_5(dMem_im6),  // sfix21
                                                      .dMem_im_v_6(dMem_im7),  // sfix21
                                                      .dMem_im_v_7(dMem_im8),  // sfix21
                                                      .dMem_vld1(dMem_vld1),
                                                      .dMux_im8(dMux_im8)  // sfix21
                                                      );

  assign dataOut_re_7 = dMux_im8;

  assign validOut = dMux_vld1;

endmodule  // FFT

